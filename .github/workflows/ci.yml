# .github/workflows/ci.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  SITE_DIR: 'site'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run Prettier check
      run: npm run format:check
      
    - name: Validate HTML
      run: |
        npx html-validate site/*.html
      
    - name: Check accessibility
      run: |
        npx axe-core-cli site/index.html --exit
    
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: npm ci
      
    - name: Start local server
      run: |
        cd site
        python3 -m http.server 8080 &
        sleep 2
        
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun --config=lighthouserc.js
        
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v3
      with:
        name: lighthouse-results
        path: .lighthouseci

  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [lint-and-test, performance-test]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Optimize assets
      run: |
        # Optimize images
        find site/assets/images -name "*.jpg" -o -name "*.png" | while read img; do
          # Create WebP versions
          cwebp -q 85 "$img" -o "${img%.*}.webp"
          # Create AVIF versions
          avifenc --min 0 --max 63 "$img" "${img%.*}.avif"
        done
        
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: ${{ env.SITE_DIR }}
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2
